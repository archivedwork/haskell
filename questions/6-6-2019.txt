Preliminary information

Allowed materials:

    Haskell library documentation,
    Hoogle,
    Haskell cheat sheet
    course home page.

If you have questions, ask the supervisors, not your fellow students.

You can solve the exercises in any order. Rules of earning points are as follows:

    Function which passes every tests earns full points.
    Function which fails some but not all tests earns partial points.
    Function with compilation errors or missing definition earns no points.

Declaration

Your solution will only be graded if it includes the following declaration.

{-
<Name>
<Neptun ID>
<06. 06. 2019.>
This solution was submitted and prepared by <Name, Neptun ID> for the 
Functional Languages Final Exam.
I declare that this solution is my own work.
I have not copied or used third-party solutions.
I have not passed my solution to my classmates, neither made it public.
Students’ regulation of Eötvös Loránd University (ELTE Regulations Vol. 
II. 74/C. § ) states that as long as a student presents another 
student’s work - or at least the significant part of it - as his/her own 
performance, it will count as a disciplinary fault. The most serious 
consequence of a disciplinary fault can be a dismissal of the student 
from the University.
-}

Final exam grading

    50 – 40p: 5
    39 – 35p: 4
    34 – 30p: 3
    29 – 25p: 2
    24 – 0p: 1

Exercises

    Define binary function application. apply takes a tuple which has a function and two parameters. (1 point)

    apply :: (a, a -> b -> c, b) -> c

    apply (2, (+), 1)            == 3
    apply (2, (-), 1 )           == 1
    apply (1, (:), [])           == [1]
    apply ([1..3], (++), [4..6]) == [1..6]

    Check whether a character is a small vowel in the English alphabet. (1 point)

    isVowel :: Char -> Bool

    isVowel 'a' == True
    isVowel 'b' == False
    isVowel 'c' == False
    isVowel 'd' == False
    isVowel 'e' == True

    Call two functions on the same parameter and collect both results. (1 point)

     mapBoth :: (a -> b) -> (a -> c) -> a -> (b, c)

     mapBoth (*2) (+1) 0       == (0,1)
     mapBoth fst snd (0,'a')   == (0,'a')
     mapBoth head last [1..10] == (1,10)

    Extract two values from two Maybes. If one of the Maybes is a Nothing then return a Nothing. Otherwise, return both values in a pair in a Maybe. (1 point)

    liftMaybe :: (Maybe a, Maybe b) -> Maybe (a,b)

    liftMaybe (Nothing, Just 0)   == Nothing
    liftMaybe (Just 0,  Nothing)  == Nothing
    liftMaybe (Nothing, Nothing)  == Nothing
    liftMaybe (Just 'a',  Just 1) == Just ('a',1)

    Apply each function in the left component of a pair to the right component. (2 points)

    elemwiseApply :: [(a -> b, a)] -> [b]

    elemwiseApply [] == []
    elemwiseApply [((*2), 0), ((+1), 3)] == [0,4]
    elemwiseApply [(head, [1..10]), (last, [1..10])] == [1,10]

    Replace every tab character ('\t') with a given number of spaces. (2 points)

    Tab character is special as it is written using two characters:

    length "\t" == 1

    untabify :: Int -> String -> String

    untabify 4 "where x = 1\t" == "where x = 1    "
    untabify 4 "\twhere x =\t1" == "    where x =    1"
    untabify 8 "\twhere x =\t1" == "        where x =        1"
    untabify 4 "\t\twhere x =\t\t1" == "        where x =        1"
    untabify 4 "" == ""

    Enumerate prime numbers in an interval. The interval is closed on both ends, meaning that lower bound and upper bound should be in the result list if they are prime numbers. (2 points)

    primeNumbers :: Int -> Int -> [Int]

    primeNumbers 2 10 == [2,3,5,7]
    primeNumbers 7 23 == [7,11,13,17,19,23]
    primeNumbers 5 5  == [5]
    primeNumbers 4 4  == []
    primeNumbers 9 10  == []

    Expand each pair in a list so that an element e occurs n times in the result. (2 points)

    expand :: [(Int, a)] -> [a]

    expand [(1,'a'), (0,'b'), (2,'c')] == "acc"
    expand [(0,'a'), (1,'b'), (2,'c')] == "bcc"
    expand [(1,'a'), (2,'b'), (0,'c')] == "abb"
    expand [(0,True), (0,False)] == []
    expand [] == []

    Enumerate indices of odd numbers in a list. (2 points)

    oddIx :: [Int] -> [Int]

    oddIx [1]   == [0]
    oddIx [1,2] == [0]
    oddIx []    == []
    oddIx [0..10] == [1,3,5,7,9]
    oddIx [1..10] == [0,2,4,6,8]
    oddIx [1,4,6,7,3,14,8] == [0,3,4]

    Add the index of each element to the element itself. (2 points)

    addIndex :: [Int] -> [Int]

    addIndex []  == []
    addIndex [0] == [0]
    addIndex [0,0,0,0] == [0..3]
    addIndex [0..5]    == [0,2..10]
    addIndex [1,5,4]   == [1,6,6]

    Generate a list using a generator function and an initial element. The generation process continues until the generator function returns Nothing. If it returns Just x then x goes into the result list. (2 points)

    The initial element is the first in the result list.

    Note: Function generate is very similar to iterate.

    generate :: (a -> Maybe a) -> a -> [a]

    generate (\n -> if n < 5 then Just (n+1) else Nothing) 0 == [0..5]
    generate (\n -> if n < 5 then Just (n+1) else Nothing) 3 == [3..5]
    generate (\n -> if n < 5 then Just (n+1) else Nothing) 7 == [7]
    generate (\n -> if n < 9 then Just (2*n) else Nothing) 1 == [1,2,4,8,16]
    generate (\_ -> Nothing) 0   == [0]
    generate (\_ -> Nothing) 7   == [7]
    generate (\_ -> Nothing) 'a' == ['a']
    generate (\_ -> Nothing) "a" == ["a"]

    Consider the following type for numbers. It distinguishes odd and even numbers.

    data Number = Even Int
                | Odd  Int
      deriving (Eq, Show)

    Define a function which increases a Number. (1 point)

    inc :: Number -> Number

    inc (Even 0) == Odd 1
    inc (Even 8) == Odd 9
    inc (Odd 1)  == Even 2
    inc (Odd 7)  == Even 8

    Create an interval of Numbers. The interval is closed on both ends, meaning both ends should be in the list. (2 points)

    The first parameter may be greater than the second. In that case, the result should be empty.

    range :: Number -> Number -> [Number]

    range (Even 0) (Odd 3)  == [Even 0, Odd 1, Even 2, Odd 3]
    range (Odd 5) (Even 8)  == [Odd 5, Even 6, Odd 7, Even 8]
    range (Odd 5) (Odd 5)  == [Odd 5]
    range (Even 4) (Even 4) == [Even 4]
    range (Even 4) (Odd 3)  == []

    Define function composition of a list of functions. (3 points)

    pipeline [f1,f2, ... , fn]   = f1 . f2 . ... . fn
    pipeline [f1,f2, ... , fn] x = f1 (f2 (... (fn x)))

    pipeline :: [a -> a] -> (a -> a)

    pipeline [(*2), (+1), (*3)] 1 == 8
    pipeline [(+1), (*2), (*3)] 1 == 7
    pipeline [(*2), (*3), (+1)] 1 == 12
    pipeline [map (*2), take 3, drop 2] [1..10] == [6,8,10]

    Given a predicate (p) and two lists (xs and ys). Enumerate those x elements in xs for which exists an y in ys such that the predicate holds. (3 points)

    Formally, we collect x elements for which ∃ y ∈ ys such that p x y is true.

    anyExists :: (a -> b -> Bool) -> [a] -> [b] -> [a]

    anyExists (<) [1..10] []    == []
    anyExists (<) [] [10..20]   == []
    anyExists (<) [1..10] [4]   == [1..3]
    anyExists (<) [1..10] [7]   == [1..6]
    anyExists (<) [1..10] [4,7] == [1..6]
    anyExists (\x y -> x + y == 5) [1..10] [2,4] == [1,3]
    anyExists (\x y -> x - y == 5) [1..10] [2,4] == [7,9]

    Check that list zs can be created by interleaving lists xs and ys. That is, elements in zs come from either xs or ys in the same order they are in xs and ys. (3 points)

    The interleaving process does not repeat elements in zs.

    split :: Eq a => [a] -> [a] -> [a] -> Bool

    split [] [] []                      == True
    split [1] [] [1]                    == True
    split [] [1] [1]                    == True
    split [1] [1] []                    == False
    split [1] [2] [1,2]                 == True
    split [1] [2] [2,1]                 == True
    split [1] [1,2] [1,1,2]             == True
    split [1] [1,2] [1,2,1]             == True
    split [1] [1,2] [2,1,1]             == False
    split [1,2,3] [4,5,6] [1,2,4,5,3,6] == True
    split [1,2,3] [4,5,6] [4,1,2,5,3,6] == True
    split [1,2,3] [4,5,6] [4,1,3,5,2,6] == False